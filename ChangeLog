2024-01-29:  David Anderson
    commit ff535a2c76858f3d9a50fb648fe00d9eaea4b8f7

    Added Jan 2024 release date (0.9.1)
            modified:   README.md

2024-01-28:  David Anderson
    commit 6178ba8c12eaa55ae906ef68fb6bf518ef0b8b0d

    Now all version 0.9.2 (no build or software change yet).
            modified:   CMakeLists.txt
            modified:   configure.ac
            modified:   doc/libdwarf.dox
            modified:   doc/libdwarfp.mm
            modified:   meson.build
            modified:   src/lib/libdwarf/libdwarf.h

2024-01-27:  David Anderson
    commit 8de6f6e694a2dcd2222c9f4757d0c44a26a52b9b

    Dated, marked releasing.
            modified:   doc/libdwarf.dox
            modified:   doc/libdwarf.pdf

2024-01-26:  David Anderson
    commit 9a8f0f761120bbbdb1f3f9442ed67b4c84e65c44

    More messages use homefy() so regression tests
    independent of that aspect of the path of
    relevant strings.
            modified:   src/bin/dwarfdump/dwarfdump.c

2024-01-26:  David Anderson
    commit 992fb90bdec76ee850758e5a2fcec60c69451f1d

    Updated Changes a little.
            modified:   doc/libdwarf.dox
    Regenerated
            modified:   doc/libdwarf.pdf

2024-01-26:  David Anderson
    commit 0bae85ef5ac5eac3b5bf21aff32eb607be9db742

    Now with latest git log
            modified:   ChangeLog

2024-01-26:  David Anderson
    commit cc343150beab8de77ae28c493ce8a83db152bda3

    A compiler used R_386_GOTOFF for a relocation
    for DWARF data.
    Now that relocation is handled.
            modified:   src/lib/libdwarf/dwarf_elf_defines.h
            modified:   src/lib/libdwarf/dwarf_elf_rel_detector.c

2024-01-26:  David Anderson
    commit bef1fc97f1da8e0a9e0609c2572fd79179a3b7bb

    One place in generic_ehdr_from_64()
    needed a check for e_shnum zero.
            modified:   src/lib/libdwarf/dwarf_elf_load_headers.c

2024-01-26:  David Anderson
    commit 001957b01a4ce47c258a23a6f7eb4acf19632acc

    Bringing up to date.
            modified:   ChangeLog

2024-01-26:  David Anderson
    commit 872820898d7d3cb237b130efe33f3dc1768499d4

    Removed lots of debug message() commands
    that were just for debugging meson.build.
            modified:   src/lib/libdwarf/meson.build

2024-01-26:  David Anderson
    commit f4219c32811ac50e61c478ccf3d89061843bfac6

    Added note about zstd (in common use
    in Linux before 2020) and libsztd-dev
            modified:   README.md

2024-01-26:  David Anderson
    commit 916fd61c3d8ed3b5a59c8cd79ae2a19e8457f176

    Fixed indent mistake (looked odd).
            modified:   meson.build

2024-01-26:  David Anderson
    commit 778be0d1075eb133dc177483197786ea9314c02d

    We delete
    four message() meson commands
    that were for debugging our use
    of meson. These four are no longer needed.
            modified:   meson.build

2024-01-26:  David Anderson
    commit 7eb45d468c05282be8ef7495136a62834df0e9e9

    If e_shoff is zero we immediately declare there
    is nothing here for DWARF and DW_DLV_NO_ENTRY
    is returned.  Consistent with the generic Elf ABI
    documentation.
    No further checking for Elf corruption
    or anything else is done.
            modified:   src/lib/libdwarf/dwarf_elf_load_headers.c

2024-01-23:  David Anderson
    commit c0cfba34ec80996426b5be2523f6447a2c9b7b39

    Revized the new logic on segments/sections
    for clarity and to catch corrupted object files
    earlier.
            modified:   src/lib/libdwarf/dwarf_machoread.c

2024-01-23:  David Anderson
    commit f83ca35f17336f8723aebacc167793d71c0f723e

    We now recognize a Mach-o object file (as opposed
    to a DSYM) and just treating that slighly differently
    lets libdwarf show the DWARF content.
    (Because, unlike DSYM, an object file has both
    executable code and DWARF data and a slight difference
    in how certain names appear)

            modified:   src/lib/libdwarf/dwarf_macho_loader.h
            modified:   src/lib/libdwarf/dwarf_machoread.c

2024-01-23:  David Anderson
    commit 3f2098ff28255c186a84899b2cc10678b65a02a9

    Reversed the order of two lines to preserve
    a test result.  I don't have any TI binaries
    and don't expect to, so the TI extension
    overlapping DW_TAG_lo_user  is a beter choice
    than DW_TAG_TI_far_type to show.
            modified:   src/lib/libdwarf/dwarf.h

    Regenerated with the updated dwarf.h
            modified:   src/lib/libdwarf/dwarf_names.c

2024-01-23:  David Anderson
    commit adb7f61db003a82fdacfc22f2cdcac70788e75d6

    Added in TI DWARF extension codes.
            modified:   src/lib/libdwarf/dwarf.h
    Regenerated.
            modified:   src/lib/libdwarf/dwarf_names.c

2024-01-22:  David Anderson
    commit 8670c9102cb57bd1dce156be1760bfb91b3f88a0

    Notes on avoiding zlib and zstd
            modified:   doc/libdwarf.dox

2024-01-20:  David Anderson
    commit 4f4e51dfb234bad27d9adb9338555e578ca4f340

    Documenting the new command to turn off access
    to decompression libraries for a build of libdwarf.

    meson
    To build a libdwarf that does not refer to or link with
    decompression libraries zstd or zlib, add the meson
    option  "-Ddecompression=false"

    configure
    As of version 0.9.1 the configure option
    "--disable-decompression" tells the build to compile
    libdwarf and dwarfdump with no reference to the zlib or
    zstd libraries.

    cmake
    To turn off linking with or using zlib or zstd libraries
    or headers there is an option to cmake add the cmake
    option DENABLE_DECOMPRESSION=NO.

            modified:   README.md
            modified:   READMEcmake.md

2024-01-20:  David Anderson
    commit dafb9bc45af0b918ff80ab668617f73c9f5778d7

    With cmake option -DENABLE_DECOMPRESSION=NO
    libdwarf will build without any reference
    to zlib.h or zstd.h or the respective libraries.

            modified:   CMakeLists.txt

2024-01-20:  David Anderson
    commit 82214ba96ba9c6a02c5584fd1dd8803f71760bed

    Now passing --disable-decompression to configure
    turns off access to libz and zstd,
    which is of use to some not expecting
    to see compressed sections and missing
    libz or zstd.
            modified:   configure.ac

2024-01-20:  David Anderson
    commit 89604291e005b1b81efee9a11742edb6443cbedb

    Now we define -Ddecompression=YES
    as the default and library builders can
    pass -Ddecompression=NO to the meson
    command to turn off decompression and
    avoid any dependency on libz or zstd.

    Fixed a bug which would result in
    a compile failure referencing includes
    for libz.h and zstd.h if one had neither.
    Doing set10('LIBZ_H',false) in meson
    has the wrong effect, as LIBZ_H gets defined 0
    so #ifdef LIBZ_H
    finds LIBZ_H is defined.

            modified:   meson.build
            modified:   meson_options.txt
            modified:   src/lib/libdwarf/meson.build

2024-01-20:  David Anderson
    commit 20e6efcbde6ba8fd964cde62c0e4c5b3ee3088b9

    ifdefs for zstd.h and zlib.h were written in a
    non-obvious way. Now in standard libdwarf form for clarity.
            modified:   src/lib/libdwarf/dwarf_init_finish.c

2024-01-10:  David Anderson
    commit ecb8700f99a0e324ae910b4965cbea16f21f7711

    up to date with git log: fixing VS warnings
            modified:   ChangeLog

2024-01-10:  David Anderson
    commit 62c214e548b72afa264e26c29ffd6db259f94fce

    Altered the argument  of _dwarf_load_elf_section_is_dwarf()
    to avoid a warning from VS (should have done this before now...)
            modified:   src/lib/libdwarf/dwarf_elf_load_headers.c

2024-01-10:  David Anderson
    commit 498968ff7ef9cdaadb901dc6183db2a0139318a7

    Now with _WIN32 arrange that lseek not generate a warning.
            modified:   src/lib/libdwarf/dwarf_object_read_common.c

2024-01-10:  David Anderson
    commit 31fe00fbc52c3fb66a6c99c4382dceb1d6c3395c

    Arraned lseek to now avoid warnings from VS
    (using ifdef _WIN32).
            modified:   src/lib/libdwarf/dwarf_object_detector.c

2024-01-10:  David Anderson
    commit ddd0cdc9c7fa6bab7b164a38e79d4030b53c9665

    If a read is too big, do multiple reads.
    If _WIN32 use extra casts to compile ok with VS.
            modified:   src/lib/libdwarf/dwarf_crc32.c
            modified:   src/lib/libdwarf/dwarf_object_detector.c
            modified:   src/lib/libdwarf/dwarf_object_read_common.c

2024-01-09:  David Anderson
    commit b70779dcdf54c15d468e7c91e2a12a6083a0265e

    Up to date with git log
            modified:   ChangeLog

2024-01-09:  David Anderson
    commit 501bf707bbf045ebaeb97f57d14f148f680f2121

    Fixing warnings (VS) about arguments to posix functions.
            modified:   src/lib/libdwarf/dwarf_object_detector.c

    This did not really fix the two warnings. There is something odd
    in the declaration of posix read() and lseek() in VS
    community edition 2022. 

    The warnings complain of off_t to 'unsigned long'
    and size_t to 'unsigned int' which seems to make no sense..
    Linux and posix docs
    agree on the argument and return types and the variables
    are appropriately typed.

2024-01-09:  David Anderson
    commit 13cf9ff0ec8593e5bf494c4e33fd0da6b4727888

    Now we can read DWARF2 produced by an obsolete
    compiler from Metrowerks. It uses DW_FORM_ref_addr
    where it means DW_FORM_addr (DW_AT_low_pc
    for example). It sets the
    relocation section type to SHT_RELA correctly
    and then names the section with .rel (not .rela
    as it should).
    It has two .rel.debug_line sections for no reason.

    libdwarf checks the CU die DW_AT_producer string
    and notes when a CU was produced by the Metrowerks
    compiler, recording that internally for use
    in dealing with attributes and FORMs.
            modified:   src/lib/libdwarf/dwarf_die_deliv.c
            modified:   src/lib/libdwarf/dwarf_elf_load_headers.c
            modified:   src/lib/libdwarf/dwarf_elfread.c
            modified:   src/lib/libdwarf/dwarf_form.c
            modified:   src/lib/libdwarf/dwarf_init_finish.c
            modified:   src/lib/libdwarf/dwarf_loclists.c
            modified:   src/lib/libdwarf/dwarf_opaque.h

2024-01-08:  David Anderson
    commit 71a912250c33bab0179cae60b88bfc9d5457ffb7

    Latest DW_LANG names now present.
            modified:   src/lib/libdwarf/dwarf_names.c

2024-01-06:  David Anderson
    commit 60c15ba27c5693193b4c9cd7ef02cca7a05693ed

    Moved some 2021 changes from 2022 to 2021
            modified:   ChangeLog2021
            modified:   ChangeLog2022

2024-01-06:  David Anderson
    commit 560449faedd9c9ce543d1757ae20486a707923a9

    Added new DW_LANG codes (see dwarfstd.org)
            modified:   dwarf.h

2024-01-03:  David Anderson
    commit cae2c6ae5363f050f65c7206b308412eed603b28
    Merge: 146fa5e7 871cbd9b

    Merge branch 'AlexDenisov-alexdenisov/add-an-option-to-disable-zlib-zstd'
    Adding cmake option to avoid looking for compression libraries

2024-01-03:  David Anderson
    commit 871cbd9b832d9a50796767a59590dbe948bcdf20
    Merge: 146fa5e7 5f310464

    Merge branch 'alexdenisov/add-an-option-to-disable-zlib-zstd' of https://github.com/AlexDenisov/libdwarf-code into AlexDenisov-alexdenisov/add-an-option-to-disable-zlib-zstd
    Adding option to cmake.  So zlib/libzstd ignored (if ignoring is requested)

2024-01-03:  AlexDenisov
    commit 5f310464c583682afdb0f607a864123001f181d8

    Add a CMake option to disable libz/libzstd

    Currently, the only way to disable these is to uninstall one of them
    from the system, which is not very convenient.

2024-01-01:  David Anderson
    commit 146fa5e72f84c286477380c80a401e78a4d1d28d

    Now just 2024
            modified:   ChangeLog

2024-01-01:  David Anderson
    commit b3300492d09687397168b6426584db755c7bd1dd

    Pure 2023 data
            new file:   ChangeLog2023

2024-01-01:  David Anderson
    commit a180535f2b4a4d0bf02b8ef2d76d639ca8136e9f

    With initial 2024 entry.
            modified:   ChangeLog
    auto update with 2024
            modified:   bugxml/dwarfbug.html
            modified:   bugxml/dwarfbuglohi.html

